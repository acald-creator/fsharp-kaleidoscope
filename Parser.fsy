%{
    open Ast
%}

%token DEF EXTERN
%token <string> IDENTIFIER
%token <float> NUMBER
%token <string * int> BINOP
%token SEMI COMMA LPAREN RPAREN EOF

%start start
%type < Ast.Expr > start
%%

start: lines SEMI { $1 }
lines: line { [$1] } | lines line { $1 @ [$2] }
line:
    | DEF prototype expr { Func (fst $2, snd $2, $3) }
    | EXTERN prototype { Extern (fst $2, snd $2) }
    | expr { $1 }

expr:
    | primary { $1 }
    | IDENTIFIER LPAREN comma_exprs RPAREN { Call(Variable $1, $3) }
    | expr BINOP expr { balance_binop($2, $1, $3) }

primary:
    | NUMBER { Number $1 }
    | IDENTIFIER { Variable $1 }
    | LPAREN expr RPAREN { $2 }

comma_exprs: { [] } | comma_exprs_1 { $1 }
comma_exprs_1:
    | expr { [$1] }
    | comma_exprs_1 COMMA expr { $1 @ [$3] }

arguments:
    | IDENTIFIER { [$1] }
    | arguments IDENTIFIER { $1 @ [$2] }

prototype:
    | IDENTIFIER LPAREN arguments RPAREN { $1, $3 }
    | IDENTIFIER LPAREN RPAREN { $1, [] }